pipeline {
    agent any
      environment {
            SSH_KEY = credentials('ssh-key') // Jenkins credential ID for the SSH private key
            SSH_USER = 'ec2-user'
            EC2_HOST = 'ec2-44-212-194-114.compute-1.amazonaws.com'
            }
    tools{
        maven 'MAVEN'
    }

    stages {
      stage('test') {
                steps {
                    script{
                        echo 'testing the application'
                        sh 'mvn test'
                    }
                }
            }
        stage('build') {
            steps {
                script{
                    echo 'bulding the application'
                    sh 'mvn clean package spring-boot:repackage '
                }
            }
        }

        stage('build image') {
            steps {
                script{
                    echo 'building images  the application'
                    withCredentials([usernamePassword(credentialsId:'docker-hub-repo', passwordVariable:'PASS',usernameVariable:'USER')]){
                        sh "echo $USER"
                        sh "echo $PASS | docker login -u $USER --password-stdin"
                        sh 'docker build -t  rahmasassi/apigw ./apigw/'
                        sh "echo $PASS | docker login -u $USER --password-stdin "
                        sh 'docker push rahmasassi/apigw'
                        sh 'docker build -t rahmasassi/eurekaserver ./eurekaserver/'
                        sh 'docker push rahmasassi/eurekaserver'
                        sh 'docker build -t rahmasassi/salaire ./users/'
                        sh 'docker push rahmasassi/users'
                        sh 'docker build -t rahmasassi/salaire ./salaires/'
                        sh 'docker push rahmasassi/salaire'
                        sh 'docker build -t rahmasassi/formation ./eurekaserver/'
                        sh 'docker push rahmasassi/formation'
                         sh 'docker build -t rahmasassi/conge ./eurekaserver/'
                         sh 'docker push rahmasassi/conge'
                    }
                }
            }
        }
         stage('Connect to EC2') {
                    steps {
                        sshagent(['ssh-key']) {
                            sh "ssh -o StrictHostKeyChecking=no ${SSH_USER}@${EC2_HOST}"
                        }
                    }
                }

                 stage('Pull Docker image') {
                            steps {
                                sshagent(['ssh-key']) {
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker container rm -f apigw"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker container rm -f eurekaserver"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker container rm -f users"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker container rm -f salaire"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker container rm -f conge"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker container rm -f formation"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker rmi \$(docker images -a -q) >/dev/null 2>&1 || true"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker pull  rahmasassi/users:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker pull  rahmasassi/apigw:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker pull rahmasassi/eurekaserver:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker pull rahmasassi/salaire:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker pull rahmasassi/conge:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker pull rahmasassi/formation:latest"
                                }
                            }
                        }
                 stage('Run Docker container') {
                            steps {
                               sshagent(['ssh-key']) {
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker network create my-network >/dev/null 2>&1 || true"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker run --rm --name apigw  --network my-network --hostname apigw -d  -p 9977:9977   rahmasassi/apigw:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker run --rm  --name users  --network my-network --hostname users  -d -p 8080:8080   rahmasassi/users:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker run --rm  --name salaire  --network my-network --hostname salaire  -d -p 8081:8081   rahmasassi/salaire:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker run  --rm --name  eurekaserver  --network my-network  --hostname eurekaserver  -d -p 7777:7777   rahmasassi/eurekaserver:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker run  --rm --name  formation  --network my-network  --hostname formation  -d -p 8077:8077   rahmasassi/formation:latest"
                                    sh "ssh ${SSH_USER}@${EC2_HOST} docker run  --rm --name  conge  --network my-network  --hostname conge  -d -p 8099:8099   rahmasassi/conge:latest"
                                }
                            }
                        }
                        }
            post {
        always {
            // Send an email to multiple recipients
            emailext subject: 'Build Notification',
                     body: 'The build has completed.',
                     to: 'rahmasass12335@gmail.com'
        }
    }}
